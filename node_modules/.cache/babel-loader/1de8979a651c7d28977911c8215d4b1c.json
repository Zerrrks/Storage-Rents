{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/nbins/Documents/GitHub/SRSRSR/Template/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/nbins/Documents/GitHub/SRSRSR/Template/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/nbins/Documents/GitHub/SRSRSR/Template/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/nbins/Documents/GitHub/SRSRSR/Template/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar axios = require(\"axios\");\n\nvar Geocodio = /*#__PURE__*/function () {\n  function Geocodio(apiKey, hostname, apiVersion) {\n    _classCallCheck(this, Geocodio);\n\n    this.apiKey = apiKey || process.env.GEOCODIO_API_KEY || null;\n    this.hostname = hostname || process.env.GEOCODIO_HOSTNAME || \"api.geocod.io\";\n    this.apiVersion = apiVersion || process.env.GEOCODIO_API_VERSION || \"v1.7\";\n    this.SINGLE_TIMEOUT_MS = 5000;\n    this.BATCH_TIMEOUT_MS = 30 * 60 * 1000;\n    this.HTTP_HEADERS = {\n      \"User-Agent\": \"geocodio-library-node/1.3.0\"\n    };\n    this.ADDRESS_COMPONENT_PARAMETERS = [\"street\", \"city\", \"state\", \"postal_code\", \"country\"];\n  }\n\n  _createClass(Geocodio, [{\n    key: \"geocode\",\n    value: function geocode(query) {\n      var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.handleRequest(\"geocode\", query, fields, limit);\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(query) {\n      var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.handleRequest(\"reverse\", query, fields, limit);\n    }\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(endpoint, query) {\n      var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var url = this.formatUrl(endpoint);\n      var queryParameters = {\n        api_key: this.apiKey,\n        fields: fields.join(\",\")\n      };\n\n      if (limit) {\n        queryParameters.limit = limit;\n      }\n\n      query = this.preprocessQuery(query, endpoint);\n      var response = null;\n\n      if (this.isSingleQuery(query)) {\n        response = this.performSingleRequest(url, query, queryParameters);\n      } else {\n        query = this.preprocessQueryList(query, endpoint);\n        response = this.performBatchRequest(url, query, queryParameters);\n      }\n\n      return response.then(function (response) {\n        return response.data;\n      }).catch(function (error) {\n        if (error.response) {\n          var errorMessage = error.response.data.error || \"Error\";\n          var code = error.response.status || 0;\n          var decoratedError = new Error(errorMessage);\n          decoratedError.code = code;\n          throw decoratedError;\n        } else {\n          throw error;\n        }\n      });\n    }\n  }, {\n    key: \"formatUrl\",\n    value: function formatUrl(endpoint) {\n      return \"https://\".concat(this.hostname, \"/\").concat(this.apiVersion, \"/\").concat(endpoint);\n    }\n  }, {\n    key: \"preprocessQueryList\",\n    value: function preprocessQueryList(query, endpoint) {\n      for (var key in query) {\n        if (Array.isArray(query) || Object.prototype.hasOwnProperty.call(query, key)) {\n          query[key] = this.preprocessQuery(query[key], endpoint);\n        }\n      }\n\n      return query;\n    }\n  }, {\n    key: \"preprocessQuery\",\n    value: function preprocessQuery(query, endpoint) {\n      // Convert lat/lon to a comma-separated string\n      var queryIsCoordinateArray = Array.isArray(query) && query.length === 2;\n\n      if (endpoint === \"reverse\" && queryIsCoordinateArray) {\n        var _query = query,\n            _query2 = _slicedToArray(_query, 2),\n            latitude = _query2[0],\n            longitude = _query2[1];\n\n        if (this.isNumeric(latitude) && this.isNumeric(longitude)) {\n          query = \"\".concat(latitude, \",\").concat(longitude);\n        }\n      }\n\n      return query;\n    }\n  }, {\n    key: \"isSingleQuery\",\n    value: function isSingleQuery(query) {\n      var _this = this;\n\n      if (typeof query === \"object\") {\n        var addressComponentKeys = Object.keys(query).filter(function (value) {\n          return _this.ADDRESS_COMPONENT_PARAMETERS.includes(value);\n        });\n        return addressComponentKeys.length >= 1;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"performSingleRequest\",\n    value: function performSingleRequest(url, query, queryParameters) {\n      if (typeof query === \"object\") {\n        queryParameters = _objectSpread(_objectSpread({}, queryParameters), query);\n      } else {\n        queryParameters.q = query;\n      }\n\n      return axios.get(url, {\n        params: queryParameters,\n        timeout: this.SINGLE_TIMEOUT_MS,\n        headers: this.HTTP_HEADERS\n      });\n    }\n  }, {\n    key: \"performBatchRequest\",\n    value: function performBatchRequest(url, queries, queryParameters) {\n      return axios.post(url, queries, {\n        params: queryParameters,\n        timeout: this.BATCH_TIMEOUT_MS,\n        headers: this.HTTP_HEADERS\n      });\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }]);\n\n  return Geocodio;\n}();\n\nmodule.exports = Geocodio;","map":{"version":3,"sources":["C:/Users/nbins/Documents/GitHub/SRSRSR/Template/node_modules/geocodio-library-node/lib/index.js"],"names":["axios","require","Geocodio","apiKey","hostname","apiVersion","process","env","GEOCODIO_API_KEY","GEOCODIO_HOSTNAME","GEOCODIO_API_VERSION","SINGLE_TIMEOUT_MS","BATCH_TIMEOUT_MS","HTTP_HEADERS","ADDRESS_COMPONENT_PARAMETERS","query","fields","limit","handleRequest","endpoint","url","formatUrl","queryParameters","api_key","join","preprocessQuery","response","isSingleQuery","performSingleRequest","preprocessQueryList","performBatchRequest","then","data","catch","error","errorMessage","code","status","decoratedError","Error","key","Array","isArray","Object","prototype","hasOwnProperty","call","queryIsCoordinateArray","length","latitude","longitude","isNumeric","addressComponentKeys","keys","filter","value","includes","q","get","params","timeout","headers","queries","post","n","isNaN","parseFloat","isFinite","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst axios = require(\"axios\");\n\nclass Geocodio {\n  constructor(apiKey, hostname, apiVersion) {\n    this.apiKey = apiKey || process.env.GEOCODIO_API_KEY || null;\n    this.hostname =\n      hostname || process.env.GEOCODIO_HOSTNAME || \"api.geocod.io\";\n    this.apiVersion = apiVersion || process.env.GEOCODIO_API_VERSION || \"v1.7\";\n\n    this.SINGLE_TIMEOUT_MS = 5000;\n    this.BATCH_TIMEOUT_MS = 30 * 60 * 1000;\n\n    this.HTTP_HEADERS = {\n      \"User-Agent\": \"geocodio-library-node/1.3.0\"\n    };\n\n    this.ADDRESS_COMPONENT_PARAMETERS = [\n      \"street\",\n      \"city\",\n      \"state\",\n      \"postal_code\",\n      \"country\"\n    ];\n  }\n\n  geocode(query, fields = [], limit = null) {\n    return this.handleRequest(\"geocode\", query, fields, limit);\n  }\n\n  reverse(query, fields = [], limit = null) {\n    return this.handleRequest(\"reverse\", query, fields, limit);\n  }\n\n  handleRequest(endpoint, query, fields = [], limit = null) {\n    const url = this.formatUrl(endpoint);\n\n    let queryParameters = {\n      api_key: this.apiKey,\n      fields: fields.join(\",\")\n    };\n\n    if (limit) {\n      queryParameters.limit = limit;\n    }\n\n    query = this.preprocessQuery(query, endpoint);\n\n    let response = null;\n    if (this.isSingleQuery(query)) {\n      response = this.performSingleRequest(url, query, queryParameters);\n    } else {\n      query = this.preprocessQueryList(query, endpoint);\n      response = this.performBatchRequest(url, query, queryParameters);\n    }\n\n    return response\n      .then(response => response.data)\n      .catch(error => {\n        if (error.response) {\n          const errorMessage = error.response.data.error || \"Error\";\n          const code = error.response.status || 0;\n\n          const decoratedError = new Error(errorMessage);\n          decoratedError.code = code;\n\n          throw decoratedError;\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  formatUrl(endpoint) {\n    return `https://${this.hostname}/${this.apiVersion}/${endpoint}`;\n  }\n\n  preprocessQueryList(query, endpoint) {\n    for (const key in query) {\n      if (\n        Array.isArray(query) ||\n        Object.prototype.hasOwnProperty.call(query, key)\n      ) {\n        query[key] = this.preprocessQuery(query[key], endpoint);\n      }\n    }\n\n    return query;\n  }\n\n  preprocessQuery(query, endpoint) {\n    // Convert lat/lon to a comma-separated string\n    const queryIsCoordinateArray = Array.isArray(query) && query.length === 2;\n\n    if (endpoint === \"reverse\" && queryIsCoordinateArray) {\n      const [latitude, longitude] = query;\n\n      if (this.isNumeric(latitude) && this.isNumeric(longitude)) {\n        query = `${latitude},${longitude}`;\n      }\n    }\n\n    return query;\n  }\n\n  isSingleQuery(query) {\n    if (typeof query === \"object\") {\n      const addressComponentKeys = Object.keys(query).filter(value =>\n        this.ADDRESS_COMPONENT_PARAMETERS.includes(value)\n      );\n\n      return addressComponentKeys.length >= 1;\n    }\n\n    return true;\n  }\n\n  performSingleRequest(url, query, queryParameters) {\n    if (typeof query === \"object\") {\n      queryParameters = {\n        ...queryParameters,\n        ...query\n      };\n    } else {\n      queryParameters.q = query;\n    }\n\n    return axios.get(url, {\n      params: queryParameters,\n      timeout: this.SINGLE_TIMEOUT_MS,\n      headers: this.HTTP_HEADERS\n    });\n  }\n\n  performBatchRequest(url, queries, queryParameters) {\n    return axios.post(url, queries, {\n      params: queryParameters,\n      timeout: this.BATCH_TIMEOUT_MS,\n      headers: this.HTTP_HEADERS\n    });\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n}\n\nmodule.exports = Geocodio;\n"]},"metadata":{},"sourceType":"script"}